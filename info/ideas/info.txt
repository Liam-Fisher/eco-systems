

TODOs: 

Definitely To Do:
- cross-system interactions 
// should extend subroutine syntax with "while" loops 
// these are generators that return and yield nothing
// might also want to have a chunk size
- system data inputs
// would require additional functions in l4, 
- system state saving
// possibly restructure the state syntax to include optionally loaded letters and parameters
- network media inputs
// would only require additions to the current network constructor function

Definitely To Do:
design a ui (possibly using the jsui max object) for creating new system properties
for the library property:
 - ui for designing and testing functions, with additional logic/testing provided by a node.script with design.js loaded 
 (probably) - a ui for testing functions by creating a js file and loading it into node.script 
 if a function is created it can be piped into the edit function of the main.js



Maybe To Do? :
add a "mode" property for interpreterActions:
allow selection of these modes (turtle/drone etc...) in a schema
allow the writing of separate message streams based on modes




Maybe To Do? :
add more metadata, such as:
a "description" property for variables, attributes, and routines
could make a separate metadata object that can be queried, with properties like:
"processing time" : an estimated processing time
"patchers" : list of patchers used to record implementations





PROTOCOL!!!!

ALWAYS use mc.signals
Do all signal processing in mc.gen~ unless absolutely necessary
STRICT typing :)

mc.gen~ "types"
generator (dummy inlet), filter  (single inlet), operator (multiple inlet)