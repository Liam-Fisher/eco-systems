import { cwd } from 'process';
import { join } from 'path';
import { Experiment } from '../managers/experiment';
import { MaxClassExts } from './constants';
import * as fs from 'fs/promises';
export const dir = join(cwd(), '../');
console.log(`running in ${dir}`);
export const stored = (filenameInStoredFormat) => filenameInStoredFormat.replaceAll('_', '/');
export const max = (filepath) => filepath.replaceAll('\\', '/');
export const blueprint = (id) => join(dir, 'blueprints', `${id}.json`);
export const experiment = () => join(dir, 'results', Experiment.id);
export const blueprints = async () => await fs.readdir(join(dir, 'blueprints'));
export const experiments = async () => await fs.readdir(join(experiment(), '../'));
export const experimentFormats = async () => await fs.readdir(experiment());
export const experimentFormatDir = (format) => join(experiment(), format);
export const createResults = async () => {
    await fs.mkdir(join(experiment(), 'systems'), { recursive: true });
    await fs.mkdir(join(experiment(), 'media'), { recursive: true });
    await fs.mkdir(join(experiment(), 'filemaps'), { recursive: true });
    await fs.mkdir(join(experiment(), 'attributes'), { recursive: true });
    await fs.mkdir(join(experiment(), 'logs'), { recursive: true });
};
function timeStamp() {
    let arr = String(Date.now());
}
export const debugLog = (stage) => join(experiment(), 'logs', `${stage}_${Math.floor(Date.now() / 1000).toString(36)}.txt`);
export const template = (file, ...categories) => `${join(dir, 'templates', ...categories.concat(stored(file)))}.json`;
export const mediaDir = () => join(experiment(), 'media');
export const systemsDir = () => join(experiment(), 'systems');
export const formatDir = (...categories) => join(dir, ...categories);
export const networkScript = () => join(experiment(), 'networkScript.txt');
export const script = (filename, folder) => join(cwd(), 'js_src', 'interpretations', folder, `${filename}.js`);
export const workerScript = (mode) => script(mode, 'main');
export const formatBP = (filename, category) => formatIn('json', filename, 'blueprints', category);
export const patcherFiles = (ext, filename, schedule) => schedule.map((a, i) => `${join(experiment(), filename)}_${i}.${ext}`);
export const maxObjFile = (ID, filename) => `"${join(experiment(), ID, filename).replaceAll('\\', '/')}"`;
export const subroutine = (filename, ...categories) => formatIn('js', filename, 'subroutines', ...categories);
export const formatIn = (ext, filename, ...categories) => `${join(formatDir(...categories), stored(filename))}.${ext}`;
export const media = (file, ext) => join(experiment(), 'media', `${file}.${ext}`).replaceAll('\\', '/');
export const patcher = (folder) => `"${join(dir, 'patchers', stored(folder), 'main')}.maxpat"`.replaceAll('\\', '/');
export const formatExt = (format) => (MaxClassExts?.[format] ?? 'json');
export const interpretationModule = (mode, method) => method ? subroutine(method, 'interpretations', mode) : 'default';
export const formatScript = (format, mode) => join(cwd(), 'js_src', 'interpretations', 'formats', mode, `${format}.js`);
export const maxVarName = (obj) => `${Experiment.id}_${obj.interpreterID}_${obj.fileIndex}`;
export const experimentFileName = (obj) => `${Experiment.id}_${obj.interpreterID}_${obj.fileIndex}`;
export const globalFilePath = (format, obj) => `${join(experiment(), `${maxVarName(obj)}.${formatExt(format)}`)}`;
export const interpretedFilePath = (format, id, index) => join(experiment(), format, `${id}_${index}.${formatExt(format)}`);
export const attributesFilePath = (format, id, index) => join(experiment(), "attributes", `${format}_${id}_${index}.json`);
export const systemFilePath = (id, generation, index, group) => join(experiment(), "systems", `i${id}m${index}f${group}g${generation}.json`);
export const localFilePath = (folder, file, maxclass) => `${join(dir, 'patchers', stored(folder), file)}.${formatExt(maxclass)}`;
export const interpretationFormat = (format) => format ? script(format, 'formats') : 'default';
